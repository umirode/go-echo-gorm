package services

import (
    "github.com/umirode/go-rest/models"
    "github.com/umirode/go-rest/repositories"
)

type {{ .Name | ToCamel }}Service struct {
    BaseService

    Repository repositories.I{{ .Name | ToCamel }}Repository
}

func (s *{{ .Name | ToCamel }}Service) Get{{ .Name | ToCamel }}ByID(id uint) (*models.{{ .Name | ToCamel }}Model, error) {
    {{ .Name | ToLowerCamel }}, err := s.Repository.FindSingleByID(id)

    if {{ .Name | ToLowerCamel }}.ID == 0 {
        return nil, err
    }

    return {{ .Name | ToLowerCamel }}, nil
}

func (s *{{ .Name | ToCamel }}Service) GetAll{{ .Name | ToCamel | Plural }}() (*[]models.{{ .Name | ToCamel }}Model, error) {
    {{ .Name | ToLowerCamel | Plural}} := s.Repository.FindAll()

    return {{ .Name | ToLowerCamel | Plural}}, nil
}

func (s *{{ .Name | ToCamel }}Service) Create{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    err := s.Repository.Add{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }})

    return err
}

func (s *{{ .Name | ToCamel }}Service) Update{{ .Name | ToCamel }}(id uint, {{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    {{ .Name | ToLowerCamel }}.ID = id

    err := s.Repository.Update{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }}, map[string]interface{}{})

    return err
}

func (s *{{ .Name | ToCamel }}Service) Delete{{ .Name | ToCamel }}(id uint) error {
    {{ .Name | ToLowerCamel }} := new(models.{{ .Name | ToCamel }}Model)
    {{ .Name | ToLowerCamel }}.ID = id

    err := s.Repository.Delete{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }})

    return err
}
