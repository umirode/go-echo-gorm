package services

import (
    "github.com/umirode/go-rest/repositories"
    "github.com/umirode/go-rest/models"
    "github.com/umirode/go-rest/specifications"
)

type {{ .Name | ToCamel }}Service struct {
    I{{ .Name | ToCamel }}Service

    BaseService

    Repository repositories.I{{ .Name | ToCamel }}Repository
}

func (s *{{ .Name | ToCamel }}Service) Get{{ .Name | ToCamel }}ByID(id uint) *models.{{ .Name | ToCamel }}Model {
    idSpecification := &specifications.IdSpecification{
        Id: id,
    }

    {{ .Name | ToLowerCamel | Plural }} := s.Repository.Query(idSpecification)
    if len(*{{ .Name | ToLowerCamel | Plural }}) < 1 {
        return nil
    }

    return &(*{{ .Name | ToLowerCamel | Plural }})[0]
}

func (s *{{ .Name | ToCamel }}Service) GetAll{{ .Name | ToCamel | Plural }}() *[]models.{{ .Name | ToCamel }}Model {
    {{ .Name | ToLowerCamel | Plural}} := s.Repository.Query()

    return {{ .Name | ToLowerCamel | Plural}}
}

func (s *{{ .Name | ToCamel }}Service) Create{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    err := s.Repository.Add{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }})

    return err
}

func (s *{{ .Name | ToCamel }}Service) Update{{ .Name | ToCamel }}(id uint, {{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    {{ .Name | ToLowerCamel }}.ID = id

    err := s.Repository.Update{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }})

    return err
}

func (s *{{ .Name | ToCamel }}Service) Delete{{ .Name | ToCamel }}(id uint) error {
    {{ .Name | ToLowerCamel }} := new(models.{{ .Name | ToCamel }}Model)
    {{ .Name | ToLowerCamel }}.ID = id

    err := s.Repository.Delete{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }})

    return err
}
