package repositories

import (
    "github.com/jinzhu/gorm"
    "github.com/umirode/go-rest/models"
)

type {{ .Name | ToCamel }}DatabaseRepository struct {
    BaseDatabaseRepository

    I{{ .Name | ToCamel }}Repository
}

func New{{ .Name | ToCamel }}DatabaseRepository(database *gorm.DB) *{{ .Name | ToCamel }}DatabaseRepository {
    repository := &{{ .Name | ToCamel }}DatabaseRepository{}

    repository.Database = database

    return repository
}

func (r *{{ .Name | ToCamel }}DatabaseRepository) FindAll() *[]models.{{ .Name | ToCamel }}Model {
    {{ .Name | ToLowerCamel | Plural}} := make([]models.{{ .Name | ToCamel }}Model, 0)

    r.Database.Find(&{{ .Name | ToLowerCamel | Plural}})

    return &{{ .Name | ToLowerCamel | Plural}}
}

func (r *{{ .Name | ToCamel }}DatabaseRepository) FindSingleById(id uint) (*models.{{ .Name | ToCamel }}Model, error) {
    {{ .Name | ToLowerCamel }} := new(models.{{ .Name | ToCamel }}Model)

    r.Database.Where("id = ?", id).First(&{{ .Name | ToLowerCamel }})

	if {{ .Name | ToLowerCamel }}.ID == 0 {
		return nil, errors.NewNotFoundError()
	}

	return {{ .Name | ToLowerCamel }}, nil
}

func (r *{{ .Name | ToCamel }}DatabaseRepository) Add{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    err := r.create({{ .Name | ToLowerCamel }})

    return err
}

func (r *{{ .Name | ToCamel }}DatabaseRepository) Update{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    err := r.update({{ .Name | ToLowerCamel }}, map[string]interface{}{
        "FIELD": "TEST",
    })

    return err
}

func (r *{{ .Name | ToCamel }}DatabaseRepository) Delete{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    err := r.delete({{ .Name | ToLowerCamel }})

    return err
}
