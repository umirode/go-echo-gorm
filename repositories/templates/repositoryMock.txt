package repositories

import (
    "github.com/stretchr/testify/mock"
    "github.com/umirode/go-rest/models"
)

type Mock{{ .Name | ToCamel }}Repository struct {
    mock.Mock
}

func (r *Mock{{ .Name | ToCamel }}Repository) FindAll() *[]models.{{ .Name | ToCamel }}Model {
    args := r.Called()

	{{ .Name | ToLowerCamel | Plural}}, ok := args.Get(0).(*[]models.{{ .Name | ToCamel }}Model)
	if ok {
		return {{ .Name | ToLowerCamel | Plural}}
	}

	return nil
}

func (r *Mock{{ .Name | ToCamel }}Repository) FindSingleByID(id uint) (*models.{{ .Name | ToCamel }}Model, error) {
    args := r.Called(id)

	{{ .Name | ToLowerCamel }}, ok := args.Get(0).(*models.{{ .Name | ToCamel }}Model)
	if ok {
		return {{ .Name | ToLowerCamel }}, nil
	}

	return nil, args.Error(1)
}

func (r *Mock{{ .Name | ToCamel }}Repository) Add{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    args := r.Called({{ .Name | ToLowerCamel }})

    return args.Error(0)
}

func (r *Mock{{ .Name | ToCamel }}Repository) Update{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model, data map[string]interface{}) error {
    args := r.Called({{ .Name | ToLowerCamel }}, data)

    return args.Error(0)
}

func (r *Mock{{ .Name | ToCamel }}Repository) Delete{{ .Name | ToCamel }}({{ .Name | ToLowerCamel }} *models.{{ .Name | ToCamel }}Model) error {
    args := r.Called({{ .Name | ToLowerCamel }})

    return args.Error(0)
}
